SECOND POINT
-------------------------
[HttpPost]
        public HttpResponseMessage UpdateCardSchedule(int? SalesOrderID, string Token)
        {
            PaymentSchedule[] schedules;
            PaymentCard storedCard;
            SalesOrder so;
            if (SalesOrderID.HasValue)
            {
                so = wms.SalesOrders.Single(c => c.SalesOrderID == SalesOrderID.Value);
                storedCard = GetPaymentCard(Token, so);
                schedules = wms.PaymentSchedules.Where(c => c.SalesOrderID == SalesOrderID.Value && c.Payment == null).ToArray();
            }
            else
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest,"SalesOrderID is missing.");
            }

            if (schedules.Count() == 0)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, "There are no scheduled payments to update.");
            }

            if (storedCard == null)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, "Could not find credit card."); 
            }

            foreach (var payment in schedules)
            {
                payment.PaymentCardID = storedCard.PaymentCardID;
            }
            var reservation = hdc.Reservations.Where(x => x.LinkedSalesOrderId == SalesOrderID && x.Deleted == false).FirstOrDefault();
            wms.Notes.InsertOnSubmit(new Note
            {
                NoteDate = DateTime.Now,
                IsActive = true,
                EmployeeID = Employee.CurrentEmployee.EmployeeID,
                PlanID = reservation.Contract.EventDetail.Planid,
                IsFrozen = false,
                IsReminder = false,
                Notes = "Updated payment plan to card ending: " + storedCard.LastFour,
                SalesOrderID = SalesOrderID
            });

            wms.SubmitChanges();
            return Request.CreateResponse(HttpStatusCode.OK, "Payment Schedules successfully changed to selected card."); ;
        }
        ------------------------------------
FIRST POINT
/// <summary>
        /// 
        /// </summary>
        /// <param name="PaymentCardID"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("DeletePaymentCard/{PaymentCardID}/{NewPaymentCardID}")]
        public HttpResponseMessage DeletePaymentCard(int PaymentCardID, int NewPaymentCardID = 0)
        {
            try
            {
                HttpResponseMessage httpresponse = DeleteCardPer(PaymentCardID);
                if (httpresponse.StatusCode == HttpStatusCode.NoContent || (!httpresponse.IsSuccessStatusCode && httpresponse.StatusCode != HttpStatusCode.BadRequest))
                {
                    IQueryable<LittleChapel.PaymentCard> card = wms.PaymentCards;
                    var paymentcard = card.Where(c => c.PaymentCardID == PaymentCardID && (c.Deleted == false || c.Deleted == null)).FirstOrDefault();
                    var paymentcardsofsingleCustomer = card.Where(c => c.CustomerID == paymentcard.CustomerID && (c.Deleted == false || c.Deleted == null)).ToList();
                    List<Models.PaymentCard> paymentcards = null;
                    if (NewPaymentCardID == 0)
                    {
                        paymentcards = new List<Models.PaymentCard>();
                        for (int intI = 0; intI < paymentcardsofsingleCustomer.Count(); intI++)
                        {
                            Models.PaymentCard paycard = new Models.PaymentCard();
                            paycard.CardNumber = paymentcardsofsingleCustomer[intI].LastFour;
                            paycard.PaymentCardID = paymentcardsofsingleCustomer[intI].PaymentCardID;
                            paymentcards.Add(paycard);
                        }
                    }
                    if (paymentcards != null && paymentcards.Count() > 0)
                    {
                        return Request.CreateResponse(HttpStatusCode.OK, paymentcards);
                    }
                    var salesorders = paymentcard.Customer.SalesOrders.ToList();
                    for (int intI = 0; intI < salesorders.Count(); intI++)
                    {
                        var PaymentSchedules = wms.PaymentSchedules.Where(x => x.SalesOrderID == salesorders[intI].SalesOrderID && x.PaymentCardID == PaymentCardID).ToList();
                        if (PaymentSchedules.Count > 0)
                        {
                            var newPaymentcard = wms.PaymentCards.Where(x => x.PaymentCardID == NewPaymentCardID).FirstOrDefault();
                            UpdateCardSchedule(salesorders[intI].SalesOrderID, newPaymentcard.Token, PaymentCardID);
                        }
                    }
                    return Request.CreateResponse(HttpStatusCode.OK);
                }
                else
                {
                    return httpresponse;
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }
        public HttpResponseMessage DeleteCardPer(int PaymentCardID)
        {
            try
            {
                var paymentSchedules = wms.PaymentSchedules.Where(x => x.PaymentCardID == PaymentCardID).ToList();
                var paymentcard = wms.PaymentCards.Where(x => x.PaymentCardID == PaymentCardID && (x.Deleted == false || x.Deleted == null)).FirstOrDefault();
                if (paymentcard != null && paymentSchedules.Count() == 0)
                {
                    paymentcard.Deleted = true;
                    wms.SubmitChanges();
                }
                else if (paymentcard == null)
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, "Payment card is already deleted or not found.");
                }
                else if (paymentSchedules.Count > 0 && paymentcard != null)
                {
                    return Request.CreateResponse(HttpStatusCode.NoContent);
                }
                return Request.CreateResponse(HttpStatusCode.OK, "Payment card deleted.");
            }
            catch (Exception)
            {
                return Request.CreateResponse(HttpStatusCode.InternalServerError, "problem occurred trying to delete card.");
            }
        }
