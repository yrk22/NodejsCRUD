SECOND POINT
-------------------------
[HttpPost]
        public HttpResponseMessage UpdateCardSchedule(int? SalesOrderID, string Token)
        {
            PaymentSchedule[] schedules;
            PaymentCard storedCard;
            SalesOrder so;
            if (SalesOrderID.HasValue)
            {
                so = wms.SalesOrders.Single(c => c.SalesOrderID == SalesOrderID.Value);
                storedCard = GetPaymentCard(Token, so);
                schedules = wms.PaymentSchedules.Where(c => c.SalesOrderID == SalesOrderID.Value && c.Payment == null).ToArray();
            }
            else
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest,"SalesOrderID is missing.");
            }

            if (schedules.Count() == 0)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, "There are no scheduled payments to update.");
            }

            if (storedCard == null)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, "Could not find credit card."); 
            }

            foreach (var payment in schedules)
            {
                payment.PaymentCardID = storedCard.PaymentCardID;
            }
            var reservation = hdc.Reservations.Where(x => x.LinkedSalesOrderId == SalesOrderID && x.Deleted == false).FirstOrDefault();
            wms.Notes.InsertOnSubmit(new Note
            {
                NoteDate = DateTime.Now,
                IsActive = true,
                EmployeeID = Employee.CurrentEmployee.EmployeeID,
                PlanID = reservation.Contract.EventDetail.Planid,
                IsFrozen = false,
                IsReminder = false,
                Notes = "Updated payment plan to card ending: " + storedCard.LastFour,
                SalesOrderID = SalesOrderID
            });

            wms.SubmitChanges();
            return Request.CreateResponse(HttpStatusCode.OK, "Payment Schedules successfully changed to selected card."); ;
        }
        ------------------------------------
FIRST POINT
[HttpPost]
        [Route("DeletePaymentCard/{PaymentCardID}")]
        public HttpResponseMessage DeletePaymentCard(int PaymentCardID, int NewPaymentCardID = 0)
        {
            try
            {
                IQueryable<LittleChapel.PaymentCard> card = wms.PaymentCards;
                var paymentcard = wms.PaymentCards.Where(c => c.PaymentCardID == PaymentCardID && (c.Deleted == false || c.Deleted == null)).FirstOrDefault();
                var paymentcardsofsingleCustomer = card.Where(c => c.CustomerID == paymentcard.CustomerID && (c.Deleted == false || c.Deleted == null)).ToList();
                List<Models.PaymentCard> paymentcards = null;
                if (NewPaymentCardID == 0)
                {
                    for (int intI = 0; intI < paymentcardsofsingleCustomer.Count(); intI++)
                    {
                        paymentcards = new List<Models.PaymentCard>();
                        Models.PaymentCard paycard = new Models.PaymentCard();
                        paycard.CardNumber = paymentcardsofsingleCustomer[intI].LastFour;
                        paycard.PaymentCardID = paymentcardsofsingleCustomer[intI].PaymentCardID;
                        paymentcards.Add(paycard);
                    }
                }
                if (paymentcards != null && paymentcards.Count() > 0)
                {
                    return Request.CreateResponse(HttpStatusCode.OK, paymentcards);
                }
                //wms.SubmitChanges();
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }
